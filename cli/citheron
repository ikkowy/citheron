#!/usr/bin/env python3

import os
import re
import sys

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

def error_exit(message):
    print(f"error: {message}", file=sys.stderr)
    sys.exit(1)

def print_help(command=None):
    help_file = os.path.join(BASE_DIR, "help/help.txt")
    if command is not None:
        command_help_file = os.path.join(BASE_DIR, f"help/{command}.txt")
        if os.path.isfile(command_help_file):
            help_file = command_help_file
    try:
        print(open(help_file, "r").read(), end="")
    except:
        error_exit("cannot open help page")
    sys.exit(0)

# Read command line arguments
args = sys.argv[1:]
if len(args) == 0 or args[0] in ["-h", "--help", "help"]:
    print_help()
command = args.pop(0)
if not re.fullmatch(r"([A-Za-z0-9_\-\.]+)", command):
    error_exit(f"invalid argument '{command}'")
opts = {}
if len(sys.argv[1:]) == 0 or any(map(lambda arg: arg in ["-h", "--help", "help"], args)):
    print_help(command)
for arg in args:
    if match := re.fullmatch(r"([A-Za-z0-9_\-\.]+)\=(.*)", arg):
        opts[match.groups()[0]] = match.groups()[1]
    else:
        error_exit(f"invalid argument '{arg}'")

CITHERON_API_URL = opts.pop("api-url") if "api-url" in opts.keys() else os.getenv("CITHERON_API_URL")
CITHERON_API_TOKEN = opts.pop("api-token") if "api-token" in opts.keys() else os.getenv("CITHERON_API_TOKEN")
CITHERON_CONFIG_FILE = opts.pop("config-file") if "config-file" in opts.keys() else os.getenv("CITHERON_CONFIG_FILE")

def unexpected_options():
    error_exit(f"unexpected options: {str(list(opts.keys())).removeprefix('[').removesuffix(']')}")

# Execute commands
match command:
    case "generate-jwt-key":
        if opts != {}:
            unexpected_options()
        print(os.urandom(32).hex())
    case other:
        error_exit(f"unknown command '{command}'")
